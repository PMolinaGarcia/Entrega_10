12.5. Árboles

Ejercicio 93. Defina los términos árbol y árbol binario, y explique aplica-
ciones de ambas estructuras.

Un árbol es una estructura de datos que los organiza mediante nodos que establecen relaciones padre-hijo entre sí. El nodo inicial del que parte el resto de los nodos es el nodo raíz; podemos tener árboles con un número n de nodos y que de cada nodo cuelguen m nodos, y así sucesivamente. Los árboles de los que solo pueden colgar dos nodos de cada uno son los árboles binarios.

Este tipo de estructura es muy reconocible en los sistemas de organización de directorios, como los de los SO que siguen el modelo UNIX.

Ejercicio 94. Simule la inserción en un árbol binario de los siguientes ele-
mentos: 2, 1, 3, 8, 5, 2.


Suponemos que es un árbol en el que a los nodos de la izquierda representan números menores y los de la derecha mayores

           (2)


           (2)
          /
        (1)

	   
           (2)
          /   \
        (1)    (3)

           
           (2)
          /   \
        (1)    (3)
                 \
                 (8)

           (2)
          /    \
        (1)     (3)
          \     / \
          (2) (5) (8) 
           


Ejercicio 95. Explique qué reglas se siguen para borrar un elemento de un
árbol binario.

En caso de que el elemento que se elimine sea una hoja (un nodo sin hijos/subnodos), simplemente se elimina. Si el elemento que se elimina solo tiene un hijo, se sustituye el elemento por dicho hijo. En caso de que tenga dos hijos, se sustituye el elemento por su hijo menor, de tal forma que siga manteniéndose el orden del árbol original.

Ejercicio 96. Sea el siguiente código que implementa un árbol binario (la
mayor parte del código ha sido tomado de http://cslibrary.stanford.edu/110/BinaryTrees.html#java):

// BinaryTree.java
public class BinaryTree {
// Root node pointer. Will be null for an empty tree.
private Node root;
/*
--Node--
The binary tree is built using this nested node class.
Each node stores one data element, and has left and right
sub-tree pointer which may be null.
The node is a "dumb" nested class -- we just use it for
storage; it does not have any methods.
*/
private static class Node {
Node left;
Node right;
int data;
Node(int newData) {
left = null;
right = null;
data = newData;
}
}
/**
* Creates an empty binary tree -- a null root pointer.
*/
public void BinaryTree() {
root = null;
}
/**
* Returns true if the given target is in the binary tree. Uses a recursive
* helper.
*
* @param data
* @return
*/
public boolean lookup(int data) {
return (lookup(root, data));
}
/**
* Recursive lookup -- given a node, recur down searching for the given
* data.
*/
private boolean lookup(Node node, int data) {
if (node == null) {
return (false);
}
if (data == node.data) {
return (true);
} else if (data < node.data) {
return (lookup(node.left, data));
} else {
return (lookup(node.right, data));
}
}
/**
* Inserts the given data into the binary tree. Uses a recursive helper.
*
* @param data
*/
public void insert(int data) {
root = insert(root, data);
}
/**
* Recursive insert -- given a node pointer, recur down and insert the given
* data into the tree. Returns the new node pointer (the standard way to
* communicate a changed pointer back to the caller).
*/
private Node insert(Node node, int data) {
if (node == null) {
node = new Node(data);
} else {
if (data <= node.data) {
node.left = insert(node.left, data);
} else {
node.right = insert(node.right, data);
}
}
return (node); // in any case, return the new pointer to the caller
}
public int size() {
return (size(root));
}
private int size(Node node) {
if (node == null) {
return (0);
} else {
return (size(node.left) + 1 + size(node.right));
}
}
/**
* Returns the max root-to-leaf depth of the tree. Uses a recursive helper
* that recurs down to find the max depth.
*
* @return
*/
public int maxDepth() {
return (maxDepth(root));
}
private int maxDepth(Node node) {
if (node == null) {
return (0);
} else {
int lDepth = maxDepth(node.left);
int rDepth = maxDepth(node.right);
// use the larger + 1
return (Math.max(lDepth, rDepth) + 1);
}
}
/**
* Returns the min value in a non-empty binary search tree. Uses a helper
* method that iterates to the left to find the min value.
*
* @return
*/
public int minValue() {
return (minValue(root));
}
/**
* Finds the min value in a non-empty binary search tree.
*/
private int minValue(Node node) {
Node current = node;
while (current.left != null) {
current = current.left;
}
return (current.data);
}
/**
* Prints the node values in the "inorder" order. Uses a recursive helper to
* do the traversal.
*
* @return
*/
@Override
public String toString() {
return aStringBuilder(root).toString();
}
private StringBuilder aStringBuilder(Node node) {
StringBuilder sb = new StringBuilder("");
if (node == null) {
return sb;
}
// left, node itself, right
return aStringBuilder(node.left).
append(new StringBuilder(" " + node.data + " ")).
append(aStringBuilder(node.right));
}
@Override
public boolean equals(Object other) {
/*
Compares the receiver to another tree to
see if they are structurally identical.
*/
return (sameTree(root, ((BinaryTree) other).root));
}
/**
* Recursive helper -- recurs down two trees in parallel, checking to see if
* they are identical.
*/
boolean sameTree(Node a, Node b) {
// 1. both empty -> true
if (a == null && b == null) {
return (true);
} // 2. both non-empty -> compare them
else if (a != null && b != null) {
return (a.data == b.data
&& sameTree(a.left, b.left)
&& sameTree(a.right, b.right));
} // 3. one empty, one not -> false
else {
return (false);
}
}
/**
* Prints the node values in the "postorder" order. Uses a recursive helper
* to do the traversal.
*/
public void printPostorder() {
printPostorder(root);
System.out.println();
}
private void printPostorder(Node node) {
if (node == null) {
return;
}
// first recur on both subtrees
printPostorder(node.left);
printPostorder(node.right);
// then deal with the node
System.out.print(node.data + " ");



Se pide:

1. Mostrar el resultado del siguiente método y dibujar cómo está estruc-
turado el árbol:
static void mostrarFuncionamientoArbolesBinarios() {
BinaryTree bt = new BinaryTree();
bt.insert(2);
bt.insert(1);
bt.insert(3);
bt.insert(8);
bt.insert(5);
bt.insert(2);
System.out.println(bt);
bt.printPostorder();
}

1  2  2  3  5  8 

2 1 5 8 3 2 

                 
                 (2)
                 / \
              (1)   (3)
                \   / \
               (2) (5)(8)
              

2. El análisis de complejidad temporal asintótico de cada uno de los mé-
todos públicos que aparecen en el ejercicio.


public boolean lookup(int data) {
        return (lookup(root, data));
    }

Dado que es un árbol binario que se crea balanceado, será del orden de O(log n). (Lleva dentro un método que sigue dicho orden)


public void insert(int data) {
        root = insert(root, data);
    }

Al igual que el anterior, es del orden de O(log n).


public int size() {
        return (size(root));
    }

Este pertenece a O(n), porque revisa todos los nodos del árbol.


public int maxDepth() {
        return (maxDepth(root));
    }

Al igual que el anterior, es del orden de O(n), porque recorre todos los niveles.


public int minValue() {
        return (minValue(root));
    }

Como seguimos asumiendo que el árbol está balanceado, la complejidad es de O(log n).


public String toString() {
        return aStringBuilder(root).toString();
    }

O(n)


public boolean equals(Object other) {
/*
Compares the receiver to another tree to
see if they are structurally identical.
*/
        return (sameTree(root, ((BinaryTree) other).root));
    }

Es O(n), porque compara los nodos uno a uno.


public void printPostorder() {
        printPostorder(root);
        System.out.println();
    }

Es O(n), porque recorre todos los nodos del árbol.



Ejercicio 97. Explique qué es un árbol rojo-negro y qué propiedades debe
satisfacer.

Es un tipo de árbol que garantiza, mediante una serie de propiedades y reglas, que no se desbalancea demasiado en ningún momento. De esta forma, mantiene una complejidad de O(log n).

Su reglas son:

Cada nodo es rojo o negro.

La raíz siempre es negra.

Todas las hojas son negras.

Un nodo rojo no puede tener un hijo rojo.

Desde cualquier nodo, todas las rutas hasta sus hojas contienen el mismo número de nodos negros.

Ejercicio 98. Explique mediante ejemplos cómo se realiza la inserción de
un elemento en un árbol rojo-negro.

Cada vez que se inserta un elemento, se hace como si fuera rojo, y, en caso de que no cumpla las reglas del árbol, se cambia de color o se mueve el elemento.

Ejercicio 99. Explique cómo se realiza el borrado de un nudo rojo en árbol
rojo-negro.

Se realiza simplemente eliminándolo, puesto que es una operación segura que no desbalancea el árbol.

Ejercicio 100. Explique qué es un set y cómo puede implementarse mediante un árbol binario.

Un set es un tipo de estructura de datos que almacena elementos de tal forma que no permite que haya repetidos y sin importar el orden.

Para implementarlo mediante un árbol binario, tendríamos que permitir la inserción de elementos únicamente si el árbol no tiene dicho elemento. Para el resto de operaciones, como la búsqueda o la eliminación, se seguiría la implementación normal de un árbol binario.

Ejercicio 101. Explique qué es un map y cómo puede implementarse mediante un árbol binario.

Un map, también llamado diccionario, es una estructura de datos que almacena pares clave-valor, de tal forma que cada clave es única y tiene un valor asignado.

Para su implementación mediante árboles binarios, tendríamos que hacer que cada nodo tuviera una clave y un valor, de tal forma que podamos buscar un valor mediante una clave. Al igual que en la implementación de los set, habría que permitir la inserción de elementos únicamente si sus claves no se repiten.

Ejercicio 102. El propósito del presente ejercicio es mostrar la aplicación de los set y los map a un problema real. Se pide implementar un validador de doble máster siguiendo los pasos que se muestran a continuación (cree los paquetes que considere oportunos para organizar las diferentes clases):

1. Cree la clase Asignatura de tal forma que permita que cualquier asignatura tenga un identificador, un nombre, el número de semestre en que se imparte y el número de créditos ECTS.



2. Cree la clase Master de tal forma que permita que cualquier máster tenga un identificador, un nombre y un conjunto de asignaturas.



3. Heredando de la clase Master, cree la clase DobleMaster de tal forma que permita que cualquier doble máster tenga un identificador, un nombre, un conjunto de asignaturas, una relación con los dos máster que engloba, y una serie de mappings entre sus asignaturas y las asignaturas de los dos máster simples.



4. Añada a la clase DobleMaster una tabla de convalidaciones entre asignaturas de los máster simples.



5. Utilizando la técnica de TDD, complete la clase DobleMaster con un método que permita validar cualquier doble máster según las reglas que se muestran a continuación:

a) Cobertura del máster 1: para toda asignatura del máster 1, bien pertenece el conjunto de asignaturas del doble máster, bien tiene una equivalencia con alguna asignatura del doble máster.



b) Cobertura del máster 2 (análogo al paso anterior).



c) Precisión del doble máster: para toda asignatura del doble máster, bien pertenece al máster 1 bien pertenece al máster 2.



d ) Secuenciación correcta: no se da el caso de que una asignatura aparezca en distinto semestre en un máster simple y en el máster doble.



Ejercicio 103. Explique cómo implementaría un árbol en que cada nudo puede tener más de dos hijos.



Ejercicio 104. Averigüe cómo JDOM estructuraría en forma de árbol el siguiente fragmento de HTML:

<TABLE>
<TBODY>
<TR>
<TD>Shady Grove</TD>
<TD>Aeolian</TD>
</TR>
<TR>
<TD>Over the River, Charlie</TD>
<TD>Dorian</TD>
</TR>
</TBODY>
</TABLE>
